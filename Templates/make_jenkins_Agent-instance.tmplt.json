{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "AssignInstanceRole": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "InstanceRole" },
            ""
          ]
        }
      ]
    },
    "AssignPublicIp": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "NoPublicIp" },
            "true"
          ]
        }
      ]
    },
    "AssignStaticPrivateIp": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "PrivateIp" },
            ""
          ]
        }
      ]
    },
    "CreateAppVolume": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "AppVolumeDevice" },
            ""
          ]
        }
      ]
    },
    "InstallUpdates": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "NoUpdates" },
            "true"
          ]
        }
      ]
    },
    "Reboot": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "NoReboot" },
            "true"
          ]
        }
      ]
    },
    "UseCfnUrl": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "CfnEndpointUrl" },
            ""
          ]
        }
      ]
    }
  },
  "Description": "This template deploys a Linux instance to host the Jenkins slave-agent.",
  "Mappings": {},
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "EC2 Instance Configuration"
          },
          "Parameters": [
            "AmiId",
            "InstanceType",
            "InstanceRole",
            "Hostname",
            "Domainname",
            "ProvisionUser",
            "KeyPairName",
            "AdminPubkeyURL",
            "SecurityGroupIds",
            "SubnetId",
            "PrivateIp",
            "NoPublicIp",
            "NoReboot",
            "NoUpdates"
          ]
        },
        {
          "Label": {
            "default": "Jenkins EBS Volume (Optional)"
          },
          "Parameters": [
            "AppVolumeDevice",
            "AppVolumeMountPath",
            "AppVolumeSize",
            "AppVolumeType"
          ]
        },
        {
          "Label": {
            "default": "Service-setup"
          },
          "Parameters": [
            "JenkinsMaster",
            "JenkinsAgentName",
            "AgentAuthToken",
            "NpmSetupUri"
          ]
        },
        {
          "Parameters": [
            
          ]
        }
      ]
    }
  },
  "Outputs": {
    "JenkinsInstanceId": {
      "Description": "Instance ID",
      "Value": { "Ref": "JenkinsAgent" }
    }
  },
  "Parameters": {
    "AdminPubkeyURL":{
      "Description": "URL the file containing the admin group's SSH public keys.",
      "Type": "String",
      "AllowedPattern": "^$|^http://.*$|^https://.*$"
    },
    "AgentAuthToken": {
      "Description": "Authentication token-string used for JNLP config.",
      "Type": "String"
    },
    "AmiId": {
      "AllowedPattern": "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$",
      "Description": "ID of the AMI to launch",
      "Type": "String"
    },
    "AppVolumeDevice": {
      "AllowedValues": [
        "",
        "/dev/xvdf",
        "/dev/xvdg",
        "/dev/xvdh",
        "/dev/xvdi",
        "/dev/xvdj"
      ],
      "Default": "",
      "Description": "(Optional) Device to mount an extra EBS volume. Leave blank to launch without an extra application volume",
      "Type": "String"
    },
    "AppVolumeMountPath": {
      "AllowedPattern": "/.*",
      "Default": "/var/jenkins",
      "Description": "Filesystem path to mount the extra app volume. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "AppVolumeSize": {
      "ConstraintDescription": "Must be between 1GB and 16384GB.",
      "Default": "20",
      "Description": "Size in GB of the EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "MaxValue": "16384",
      "MinValue": "10",
      "Type": "Number"
    },
    "AppVolumeType": {
      "AllowedValues": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ],
      "Default": "gp2",
      "Description": "Type of EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "CfnEndpointUrl": {
      "AllowedPattern": "^$|^http[s]?://.*$",
      "Default": "https://cloudformation.us-east-1.amazonaws.com",
      "Description": "(Optional) URL to the CloudFormation Endpoint. e.g. https://cloudformation.us-east-1.amazonaws.com",
      "Type": "String"
    },
    "Domainname": {
      "ConstraintDescription": "An alphanumeric string to complete the domain portion of the instance's FQDN.",
      "Description": "Suffix for Jenkins's hostname and DNS record",
      "Type": "String"
    },
    "EpelRepo": {
      "AllowedPattern": "^[a-z][a-z0-9-]*$",
      "ConstraintDescription": "An alphanumeric string that represents the EPEL yum repo's label.",
      "Default": "epel",
      "Description": "Name of network's EPEL repo.",
      "Type": "String"
    },
    "Hostname": {
      "ConstraintDescription": "An alphanumeric string to complete the hostname portion of the instance's FQDN.",
      "Description": "Node-name for Jenkins's hostname and DNS record",
      "Type": "String"
    },
    "InstanceRole": {
      "Default": "",
      "Description": "(Optional) IAM instance role to apply to the instance",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "c4.large",
        "c4.xlarge",
        "m4.large",
        "m4.xlarge"
      ],
      "Default": "t2.micro",
      "Description": "Amazon EC2 instance type",
      "Type": "String"
    },
    "JenkinsAgentName": {
      "Description": "Name assigned to this Jenkins build-executor.",
      "Type": "String"
    },
    "JenkinsMaster": {
      "Description": "FQDN of Jenkins master node",
      "Type": "String"
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "NpmSetupUri": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "https://rpm.nodesource.com/setup_8.x",
      "Description": "URL of NPM setup script.",
      "Type": "String"
    },
    "NoPublicIp": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "true",
      "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
      "Type": "String"
    },
    "NoReboot": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to reboot the instance as the last step of cfn-init execution",
      "Type": "String"
    },
    "NoUpdates": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to run yum update during a stack update (on the initial instance launch, Watchmaker _always_ installs updates)",
      "Type": "String"
    },
    "PipRpm": {
      "Default": "python2-pip",
      "Description": "Name of preferred pip RPM.",
      "Type": "String"
    },
    "PrivateIp": {
      "Default": "",
      "Description": "(Optional) Set a static, primary private IP. Leave blank to auto-select a free IP",
      "Type": "String"
    },
    "ProvisionUser": {
      "AllowedPattern": "[a-z0-9]{6,12}+",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters.",
      "Default": "jenkagent",
      "Description": "Default login user account name (do not use \"jenkins\").",
      "Type": "String"
    },
    "PypiIndexUrl": {
      "AllowedPattern": "^http[s]?://.*$",
      "Default": "https://pypi.org/simple",
      "Description": "URL to the PyPi Index",
      "Type": "String"
    },
    "PyStache": {
      "Default": "pystache",
      "Description": "Name of preferred pystache RPM.",
      "Type": "String"
    },
    "SecurityGroupIds": {
      "Description": "List of security groups to apply to the instance",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "SubnetId": {
      "Description": "ID of the subnet to assign to the instance",
      "Type": "AWS::EC2::Subnet::Id"
    }
  },
  "Resources": {
    "JenkinsAgent": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT30M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "config",
              "watchmaker-install"
            ]
          },
          "config": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      { "Ref": "AWS::StackId" },
                      "\n",
                      "region=",
                      { "Ref": "AWS::Region" },
                      "\n",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "role=",
                                { "Ref": "InstanceRole" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "url=",
                                { "Ref": "CfnEndpointUrl" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      "interval=1",
                      "\n",
                      "verbose=true",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.JenkinsAgent.Metadata\n",
                      "action=/opt/aws/bin/cfn-init -v -c update",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource JenkinsAgent",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --role ",
                                { "Ref": "InstanceRole" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/scripts/watchmaker-install.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PYPI_URL=",
                      { "Ref": "PypiIndexUrl" },
                      "\n",
                      "PYPI_HOST=$(echo $PYPI_URL |sed -e \"s/[^/]*\\/\\/\\([^@]*@\\)\\?\\([^:/]*\\).*/\\2/\")\n",
                      "pip install",
                      " --index-url=\"$PYPI_URL\"",
                      " --trusted-host=\"$PYPI_HOST\"",
                      " --allow-all-external",
                      " --upgrade pip setuptools watchmaker\n\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/systemd/system/jenkins-agent.service": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[Unit]\n",
                      "Description=Jenkins Agent Daemon\n",
                      "\n",
                      "[Service]\n",
                      "ExecStart=/bin/java -jar ",
                      { "Ref": "AppVolumeMountPath" },
                      "/slave.jar -jnlpUrl https://",
                      { "Ref": "JenkinsMaster" },
                      "/computer/",
                      { "Ref": "JenkinsAgentName" },
                      "/slave-agent.jnlp -secret ",
                      { "Ref": "AgentAuthToken" },
                      " -workDir \"",
                      { "Ref": "AppVolumeMountPath" },
                      "\"\n",
                      "User=jenkins\n",
                      "Restart=always\n",
                      "RestartSec=15\n",
                      "\n",
                      "[Install]\n",
                      "WantedBy=multi-user.target\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "watchmaker-install": {
            "commands": {
              "10-watchmaker-install": {
                "command": "bash -xe /etc/cfn/scripts/watchmaker-install.sh"
              }
            }
          }
        }
      },
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeSize": "20",
              "VolumeType": "gp2"
            }
          },
          {
            "Fn::If": [
              "CreateAppVolume",
              {
                "DeviceName": { "Ref": "AppVolumeDevice" },
                "Ebs": {
                  "DeleteOnTermination": "true",
                  "VolumeSize": { "Ref": "AppVolumeSize" },
                  "VolumeType": { "Ref": "AppVolumeType" }
                }
              },
              { "Ref": "AWS::NoValue" }
            ]
          }
        ],
        "IamInstanceProfile": {
          "Fn::If": [
            "AssignInstanceRole",
            { "Ref": "InstanceRole" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "ImageId": { "Ref": "AmiId" },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyPairName" },
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "AssociatePublicIpAddress": {
              "Fn::If": [
                "AssignPublicIp",
                "true",
                "false"
              ]
            },
            "GroupSet": {
              "Ref": "SecurityGroupIds"
            },
            "SubnetId": {
              "Ref": "SubnetId"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "AWS::StackName" }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\n",
                "system_info:\n",
                "  default_user:\n",
                "    name: ",
                { "Ref": "ProvisionUser" },
                "\n",
                "\n",
                "hostname: ",
                { "Ref": "Hostname" },
                "\n",
                "fqdn: ",
                { "Ref": "Hostname" },
                ".",
                { "Ref": "Domainname" },
                "\n",
                {
                  "Fn::If": [
                    "CreateAppVolume",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "bootcmd:\n",
                          "- cloud-init-per instance mkfs-appvolume mkfs -t ext4 ",
                          { "Ref": "AppVolumeDevice" },
                          "\n",
                          "mounts:\n",
                          "- [ ",
                          { "Ref": "AppVolumeDevice" },
                          ", ",
                          { "Ref": "AppVolumeMountPath" },
                          " ]\n"
                        ]
                      ]
                    },
                    { "Ref": "AWS::NoValue" }
                  ]
                },
                "\n",
                "runcmd:\n",
                "  - |\n",
                "      # Export cert bundle ENVs\n",
                "      export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "      export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n\n",
                "      \n",
                "      # Define our error-handler\n",
                "      function err_exit {\n",
                "         echo \"${1}\"\n",
                "         logger -p kern.crit -t UserData \"${1}\"\n",
                "         /opt/aws/bin/cfn-signal -e 1 --stack ",
                            { "Ref": "AWS::StackName" },
                          " --resource JenkinsAgent\n",
                "         exit 1\n",
                "      }\n",
                "      \n",
                "      # Install RPMs needed by the cfn-tools.\n",
                "      yum --enablerepo=",
                       { "Ref": "EpelRepo" },
                       " install -y ",
                       { "Ref": "PyStache" },
                       " ",
                       { "Ref": "PipRpm" },
                       " || err_exit 'Could not install Cfn dependencies.'\n",
                "      \n",
                "      # Initialize the Cfn subsystems\n",
                "      /opt/aws/bin/cfn-init -s ",
                       { "Ref": "AWS::StackName" },
                       " -r JenkinsAgent ",
                       " --region ",
                       { "Ref": "AWS::Region" },
                       " && echo 'Successfully ran cfn-init'",
                       " || err_exit 'Failed to run cfn-init' > /dev/stderr\n",
                "      \n",
                "      # Install admin-groups keys to provisioning user\n",
                "      curl -skL ",
                          { "Ref" : "AdminPubkeyURL" },
                          " -o /tmp/admin.keys || error_exit ",
                          "'Could not download admin keys'\n",
                "      cat /tmp/admin.keys >> /home/",
                          { "Ref" : "ProvisionUser" },
                          "/.ssh/authorized_keys || error_exit ",
                          "'Could not add admin keys'\n",
                "      \n",
                "      # Add service account\n",
                "      useradd jenkins && echo 'Success' || ",
                       "err_exit 'Failed to create jenkins user'\n",
                "      \n",
                "      # Set perms on the jenkins dir\n",
                "      if [[ -d ",
                          { "Ref": "AppVolumeMountPath" },
                          " ]]\n",
                "      then\n",
                "         chmod 1777 ",
                          { "Ref": "AppVolumeMountPath" },
                          " \n",
                "      else\n",
                "         install -d -m 001777 ",
                          { "Ref": "AppVolumeMountPath" },
                          " \n",
                "      fi\n",
                "      \n",
                "      # Take care of systemd configuration\n",
                "      printf 'Enabling jenkins systemd service... '\n",
                "      systemctl enable jenkins-agent && echo 'Success.'",
                       " || err_exit 'Failed to enable jenkins service'\n",
                "      \n",
                "      # Install nodejs repo-def\n",
                "      curl -sL ",
                         { "Ref": "NpmSetupUri" },
                         " | bash -\n",
                "      \n",
                "      # Install packages needed to fully-enable the agent\n",
                "      yum --enablerepo=epel install -y @development anaconda",
                       " ansible fpm2 groovy maven python-nose python-nose2",
                       " ruby rubygems-devel nodejs\n",
                "      \n",
                "      # Grab the slave.jar\n",
                "      su -s /bin/bash jenkins -c \"cd ",
                       { "Ref": "AppVolumeMountPath" },
                       " && curl -OskL https://",
                       { "Ref": "JenkinsMaster" },
                       "/jnlpJars/slave.jar\"\n",
                "      \n",
                "      # Start the agent software\n",
                "      systemctl start jenkins-agent\n",
                "      \n",
                "      # Aaaaaand we're done...\n",
                "      /opt/aws/bin/cfn-signal -e 0",
                       " --stack ",
                       { "Ref" : "AWS::StackName" },
                       " --resource JenkinsAgent",
                       " --region ",
                       { "Ref" : "AWS::Region"},
                       "\n",
                "      \n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    }
  }
}
